' *** Spin2/PASM Debugger
' *** Sets up debugger and then launches applicaion
'
CON	dbg_addr	=	$FD900
'
'
' ********************
' *  Debugger Setup  *
' ********************
'
'
' Protected hub RAM usage ($FC000..$FFFFF)
'
' $FC000 - DEBUG data				addresses fixed in software
'
' $FD900 - Cog N reg $005..$0FF debugger program and data
'
' $FDE00 - Cog 0 reg $010..$0FF buffer
' $FE1C0 - Cog 1 reg $010..$0FF buffer
' $FE580 - Cog 2 reg $010..$0FF buffer
' $FE940 - Cog 3 reg $010..$0FF buffer
' $FED00 - Cog 4 reg $010..$0FF buffer
' $FF0C0 - Cog 5 reg $010..$0FF buffer
' $FF480 - Cog 6 reg $010..$0FF buffer
' $FF840 - Cog 7 reg $010..$0FF buffer
'
' $FFC00 - Cog 7 reg $000..$00F buffer		addresses fixed in silicon
' $FFC40 - Cog 7 reg $000..$00F debug ISR
'
' $FFC80 - Cog 6 reg $000..$00F buffer
' $FFCC0 - Cog 6 reg $000..$00F debug ISR
'
' $FFD00 - Cog 5 reg $000..$00F buffer
' $FFD40 - Cog 5 reg $000..$00F debug ISR
'
' $FFD80 - Cog 4 reg $000..$00F buffer
' $FFDC0 - Cog 4 reg $000..$00F debug ISR
'
' $FFE00 - Cog 3 reg $000..$00F buffer
' $FFE40 - Cog 3 reg $000..$00F debug ISR
'
' $FFE80 - Cog 2 reg $000..$00F buffer
' $FFEC0 - Cog 2 reg $000..$00F debug ISR
'
' $FFF00 - Cog 1 reg $000..$00F buffer
' $FFF40 - Cog 1 reg $000..$00F debug ISR
'
' $FFF80 - Cog 0 reg $000..$00F buffer
' $FFFC0 - Cog 0 reg $000..$00F debug ISR
'
'
DAT		org
'
'
' Set clock mode
'
t		hubset	_clkmode1_	'start external clock, remain in rcfast mode	(reused as t)
		waitx	##20_000_000/100'allow 10ms for external clock to stabilize
		hubset	_clkmode2_	'switch to external clock mode

		waitx	_delay_		'do any initial delay
'
'
' Allocate lock[15]
'
		rep	#1,#16		'allocate lock[0..15]
		locknew	t

		mov	t,#14		'return lock[14..0], leaves lock[15] allocated
.return		lockret	t
		djnf	t,#.return
'
'
' Write debugger ISR to all eight cogs' ISR buffers
'
		neg	t,#$40		'initial address of $FFFC0
		rep	#3,#8
		setq	#$00F-$000
		wrlong	@debug_isr/4,t
		sub	t,#$80
'
'
' Move debugger program into position
'
		setq	#($FDE00-$FD900)/4-1
		wrlong	@debugger/4,##dbg_addr
'
'
' Move DEBUG data to $FC000
'
		loc	ptra,#@debugger_end
		loc	ptrb,#$FC000
		rdword	t,ptra
		callpa	t,#move
'
'
' Protect upper hub RAM and enable debugging on cogs
'
		hubset	_hubset_
'
'
' Move application code to $00000
'
		loc	ptra,#@debugger_end
		add	ptra,t
		loc	ptrb,#0
		callpa	_appsize_,#move
'
'
' Launch application
'
		coginit	#0,#$00000	'relaunch cog 0 from $00000
'
'
' Move pa bytes from @ptra to @ptrb
'
move		add	pa,#3		'round bytes up to long
		shr	pa,#2

.block		decod	pb,#8		'determine number of longs in block ($100 max)
		fle	pb,pa
		sub	pa,pb		'adjust remaining-longs count

		sub	pb,#1		'get setq long count

		setq2	pb		'read block of longs
		rdlong	0,ptra++
		setq2	pb		'write block of longs
		wrlong	0,ptrb++

	_ret_	tjnz	pa,#.block	'another block?
'
'
' Data set by compiler
'
_clkmode1_	long	0		'@09C: clkmode with rcfast
_clkmode2_	long	0		'@0A0: clkmode with external clock
_delay_		long	0		'@0A4: initial delay (default is 0)
_appsize_	long	0		'@0A8: application size in bytes
_hubset_	long	$2003_00FF	'@0AC: cog-debug-enable bits in low byte (default is $FF)
'
'
' *******************************************************
' *  Debug ISR						*
' *							*
' *	- on debug interrupt, jmp #$1F8 executes	*
' *	- registers $000..$00F copy to hub		*
' *	- registers $000..$00F load from hub		*
' *	- jmp #0 (debug_isr) executes			*
' *	- debug_isr code runs, ending with jmp #$1FD	*
' *	- registers $000..$00F load from hub		*
' *	- reti0 executes, returns to main code		*
' *							*
' *******************************************************
'
		org
debug_isr
'
'
' Get buffer addresses and status data - routine must be located within $000.$00F
'
cth		getct	cth	wc	'get    cth where instruction sits at $000
ctl		getct	ctl		'get    ctl where instruction sits at $001
brkcz		getbrk	brkcz	wcz	'get status where instruction sits at $002
regh		cogid	regh		'get  cogid where instruction sits at $003
regl		not	regl,regh	'get !cogid where instruction sits at $004

		shl	regl,#7		'calculate register $000..$00F buffer address

		mul	regh,##$3C0	'calculate register $010..$0FF buffer address
		add	regh,##$FDE00

		setq	#$0FF-$010	'save registers $010..$0FF
		wrlong	$010,regh

		setq	#$0FF-$005	'load debugger into registers $005..$0FF
		rdlong	$005,##dbg_addr	'(preserve cth..regl at $000..$004)

		jmp	#debug_entry	'jump to debug_entry (jmp is already pipelined)
'
'
' ***********************************************
' *  Debugger					*
' *						*
' *	- regh..brkcz saved at $000..$004	*
' *	- debugger loads at $005..$0FF		*
' *						*
' ***********************************************
'
		org	$005
debugger
'
'
' Debugger exit - routine must be located within $005.$00F
'
debug_exit	mov	pa,pa_		'restore pa
		mov	pb,pb_		'restore pb
		mov	ptra,ptra_	'restore ptra
		mov	ptrb,ptrb_	'restore ptrb
		push	stk2		'restore stack
		push	stk1		'restore stack
		push	stk0		'restore stack

		setq	#$0FF-$010	'restore $010..$0FF
		rdlong	$010,regh

		brk	#$10		'enable BRK-instruction interrupt

		jmp	#$1FD		'restore $000..$00F, return from debug interrupt
'
'
' Data set by compiler
'
_txpin_		long	62		'@11C: tx pin (default is 62, msb = timestamp)
_txmode_	long	0		'@120: tx mode (2_000_000-8-N-1)
_waitxms_	long	0		'@124: waitx value for 1ms delay
'
'
' Debugger entry
'
debug_entry

pa_		mov	pa_,pa		'save pa
pb_		mov	pb_,pb		'save pb
ptra_		mov	ptra_,ptra	'save ptra
ptrb_		mov	ptrb_,ptrb	'save ptrb
stk0		pop	stk0		'save stack (allows nested calls)
stk1		pop	stk1		'save stack
stk2		pop	stk2		'save stack

ptr		res	1		'undefined registers
msb		res	1
dig		res	1
w		res	1
x		res	1
y		res	1
z		res	1

		org	ptr		'next 7 instructions use undefined data registers

		sub	ctl,#62	wc	'trim 64-bit ct
		subx	cth,#0

		brk	##$800		'show ina/inb (must be disabled before RETI0)

.wait		locktry	#15	wc	'wait for lock[15] so that we own the tx pin
	if_nc	jmp	#.wait

		fltl	_txpin_		'reset and configure the tx pin
		wrpin	#%01_11110_0,_txpin_
		wxpin	_txmode_,_txpin_
		drvl	_txpin_

'
'
' If COGINIT then show message
'
		testb	brkcz,#23  wc	'cog started or BRK-instruction interrupt?
	if_nc	jmp	#debug_id

		call	#cognout	'output "CogN  " with possible timestamp (msb = 31)

		callpb	#_ini,#rstrout	'output "INIT "

		mov	x,ptrb_		'output ptrb
		call	#hexout

		callpa	#" ",#txout	'output " "

		mov	x,ptra_		'output ptra
		call	#hexout

		testb	brkcz,#0   wc	'load or jump?
	if_nc	callpb	#_lod,#rstrout	'output " load"
	if_c	callpb	#_jmp,#rstrout	'output " jump"

debug_done	call	#release_tx	'release tx

		jmp	#debug_exit	'exit debugger
'
'
' Get BRK-instruction identifier and point to DEBUG data
'
debug_id	getbyte	ptr,brkcz,#3
		shl	ptr,#1
		bith	ptr,#14 addbits 5
		rdword	ptr,ptr
		bith	ptr,#14 addbits 5
'
'
' Process DEBUG bytecodes
'
debug_byte	callpa	#z,#getdeb	'get DEBUG bytecode

		test	z,#$E0	wz	'argument command?
	if_nz	jmp	#arg_cmd
'
'
' Simple command
'
		altgb	z,#.table	'end/chr/str/asm
		getbyte	w
		jmp	w

.table		byte	debug_done	'end of DEBUG commands
		byte	.asm		'set asm mode
		byte	.if		'IF(cond)
		byte	.if		'IFNOT(cond)
		byte	.cogn		'output "CogN  " with possible timestamp
		byte	.chr		'output chr
		byte	.str		'output string
		byte	.dly		'DLY(ms)

.asm		ijnz	asm,#debug_byte	'set asm mode

.if		call	#getval		'IF/IFNOT(cond)
		testb	z,#0	wc
	if_nc	tjz	x,#debug_done
	if_c	tjnz	x,#debug_done
		jmp	#debug_byte

.cogn		call	#cognout	'output "CogN  " with possible timestamp
		jmp	#debug_byte

.chr		call	#getval		'output chr
		callpa	x,#txout
		jmp	#debug_byte

.str		call	#dstrout	'output string
		jmp	#debug_byte

.dly		call	#release_tx	'DLY(ms), release the tx pin so other cogs can message
		call	#getval		'get ms
.dly_loop	tjz	x,#debug_exit	'if delay done, exit debugger
		waitx	_waitxms_	'wait 1ms
		djnf	x,#.dly_loop	'loop

'
'
' Argument command
'
arg_cmd		testb	z,#0	wz	'if %x0, output ", "
	if_nz	callpb	#_com,#rstrout

		testb	z,#1	wz	'if %0x, output expression_string + " = "
	if_nz	call	#dstrout
	if_nz	callpb	#_equ,#rstrout

		call	#getval		'get ptr/val argument
		mov	ptrb,x

		testb	z,#4	wz	'get len argument?
	if_z	call	#getval
	if_z	mov	y,x

		cmp	z,#$40	wc	'val or array command?
	if_00	jmp	#value_cmd
	if_01	jmp	#array_cmd
'
'
' ZSTR(ptr)
' LSTR(ptr,len)
'
  		callpa	#$22,#txout	'output quote

		testb	z,#4	wc	'c=0 if ZSTR, c=1 if LSTR
  if_c		tjz	y,#.done	'if LSTR and len is zero then done
.loop		rdbyte	pa,ptrb++  wz	'get next chr
  if_c_or_nz	call	#txout		'if LSTR or chr <> 0 then output chr
  if_c		sub	y,#1	wz	'if LSTR, dec len
  if_nz		jmp	#.loop		'if LSTR and len <> 0 or ZSTR and chr <> 0 then loop
.done
  		callpa	#$22,#txout	'output quote

		jmp	#debug_byte
'
'
' Value command
'
value_cmd	testb	z,#3	wc	'determine msb
		testb	z,#2	wz
		mov	msb,#31		'long/reg/minimum
  if_10		mov	msb,#15		'word
  if_01		mov	msb,#7		'byte

		testb	z,#5	wz	'signed?
  if_nz		zerox	x,msb		'if not, zero-extend from msb
  if_z		signx	x,msb		'if so, sign-extend from msb
  if_z		abs	x	wc	'..make absolute
  if_z_and_c	callpa	#"-",#txout	'..if was negative then output "-"

		test	z,#$1C	wz	'minimum-sized?
  if_z		encod	msb,x

		testb	z,#7	wc	'output dec/hex/bin
		testb	z,#6	wz
  if_x1		mov	w,#decout
  if_10		mov	w,#hexout
  if_11		mov	w,#binout
		call	w

		testb	z,#4	wz	'if value command then done, else continue array
  if_nz		jmp	#debug_byte	'(followed by array_ret)
'
'
' Array command
'
array_ret	djz	y,#debug_byte	'done?

		callpb	#_com,#rstrout	'output ", "

array_val	testb	z,#3	wc	'read array element and advance address
		testb	z,#2	wz
	if_11	rdlong	x,ptrb++
	if_10	rdword	x,ptrb++
	if_01	rdbyte	x,ptrb++
	if_00	mov	x,ptrb
	if_00	add	ptrb,#1
	if_00	call	#getreg

		jmp	#value_cmd	'output value


array_cmd	tjnz	y,#array_val	'if array not empty then output values

		callpb	#_nil,#rstrout	'if array empty then output "nil"
		jmp	#debug_byte
'
'
' Release tx
'
release_tx	testb	_com,#31  wc	'if tx output has occurred, output new line
	if_c	callpa	#13,#txout
	if_c	callpa	#10,#txout

.wait		rdpin	w,_txpin_  wc	'wait for tx not busy
	if_c	jmp	#.wait

		fltl	_txpin_		'disable tx pin

	_ret_	lockrel	#15		'release lock[15] so that other cogs can own the tx pin
'
'
' *****************
' *  Subroutines  *
' *****************
'
'
' Get DEBUG byte - pa must hold register to receive byte
'
getdeb		altd	pa
		rdbyte	0-0,ptr
	_ret_	add	ptr,#1
'
'
' Get DEBUG value according to mode into x
'
getval		tjnz	asm,#getasm

	_ret_	rdlong	x,++ptra
'
'
' Get ASM value from DEBUG data into x
'
' %1000_00xx, %xxxx_xxxx					10-bit register, big-endian
' %00xx_xxxx, %xxxx_xxxx					14-bit constant, big-endian
' %0100_0000, %xxxx_xxxx, %xxxx_xxxx, %xxxx_xxxx, %xxxx_xxxx	32-bit constant, little-endian
'
getasm		rdword	x,ptr		'get initial word
		add	ptr,#2

		movbyts	x,#%%3201	'swap two lower bytes

		testb	x,#15	wc	'10-bit register?
	if_c	jmp	#getreg

		testb	x,#14	wc	'14-bit or 32-bit constant?
	if_c	sub	ptr,#1
	if_c	rdlong	x,ptr
	if_c	add	ptr,#4
		ret
'
'
' Get register x into x
'
' $000..$00F = from @regl
' $010..$0FF = from @regh
' $100..$1F5 = direct
' $1F6..$1F9 = pa_..ptrb_
' $1FA..$1FF = direct
' $200..$3FF = lut
'
getreg		signx	x,#9	wc	'lut register? (signx simplifies comparisons)
	if_c	jmp	#.lut

		cmp	x,#$010	wc	'$000..$00F ?
	if_c	shl	x,#2
	if_c	add	x,regl
	if_c	jmp	#.reg

		cmp	x,#$100	wc	'$010..$0FF ?
	if_c	sub	x,#$010
	if_c	shl	x,#2
	if_c	add	x,regh
	if_c	jmp	#.reg

		cmp	x,#$1F6	wc	'$100..$1F5 ?
	if_nc	cmpr	x,#$1F9	wc	'$1FA..$1FF ?
	if_nc	sub	x,#$1F6 - pa_	'$1F6..$1F9 ?
		alts	x
	_ret_	mov	x,0-0		'reg $100..$1FF

.reg	_ret_	rdlong	x,x		'reg $000..$0FF

.lut	_ret_	rdlut	x,x		'lut $200..$3FF
'
'
' Decimal output x
'
decout		mov	pb,#9*4	wz	'start with billions, z = 0
		mov	dig,#2		'preset underscore counter

.digit		loc	pa,#dbg_addr+(@tens-@debugger)
		add	pa,pb
		rdlong	w,pa

		mov	pa,#0		'determine decimal digit
.sub		cmpsub	x,w	wc
	if_c	cmp	pa,pa	wz	'on first non-zero digit, z = 1
	if_c	ijnz	pa,#.sub

		incmod	dig,#2	wc	'if underscore after digit, c = 1

	if_nz	cmp	pb,#0	wz	'always output lowest digit
	if_nz	jmp	#.skip		'don't output leading zeros

		add	pa,#"0"		'output a digit
		call	#txout

		tjz	pb,#.skip	'output an underscore?
	if_c	callpa	#"_",#txout

.skip		sub	pb,#4		'next digit
	_ret_	tjns	pb,#.digit
'
'
' Hex output x
'
hexout		callpa	#"$",#txout	'output "$"

hexout_digits	mov	dig,msb		'determine number of digits
		shr	dig,#2

.loop		altgn	dig,#x		'output a hex digit
		getnib	pa
		cmp	pa,#10	wc
	if_c	add	pa,#"0"
	if_nc	add	pa,#"A"-10
		call	#txout
		cmp	dig,#4	wz	'output an underscore before lower group of 4 digits
	if_z	callpa	#"_",#txout
	_ret_	djnf	dig,#.loop	'next digit
'
'
' Binary output x
'
binout		callpa	#"%",#txout	'output "%"

		mov	dig,msb

.loop		testb	x,dig	wz	'output a binary digit
	if_nz	callpa	#"0",#txout
	if_z	callpa	#"1",#txout
		tjz	dig,#.skip	'output an underscore before groups of 8 digits
		test	dig,#7	wz
	if_z	callpa	#"_",#txout
.skip	_ret_	djnf	dig,#.loop	'next digit
'
'
' Debug string output
'
dstrout_loop	call	#txout
dstrout		callpa	#pa,#getdeb
	_ret_	tjnz	pa,#dstrout_loop
'
'
' Output "CogN  " with possible timestamp
'
cognout		cogid	pb		'get cog number into string
		setnib	_cog,pb,#6
		callpb	#_cog,#rstrout	'output "CogN  "

		mov	msb,#31		'enable 32-bit output

	_ret_	tjs	_txpin_,#.time	'timestamp?

.time		mov	x,cth		'output cth
		call	#hexout
		callpa	#"_",#txout	'output "_"
		mov	x,ctl		'output ctl
		call	#hexout_digits
		mov	pb,#_cog+1	'output "  " (followed by rstrout)
'
'
' Register z-string output @pb
'
rstrout		shl	pb,#2		'convert register address to byte index

.loop		altgb	pb		'get byte
		getbyte	pa

	_ret_	tjnz	pa,#.out	'if byte = 0, done

.out		call	#txout		'output byte

		ijnz	pb,#.loop	'next byte, always branches
'
'
' Transmit byte in pa
'
txout		rdpin	w,_txpin_  wc	'wait until tx not busy
	if_c	jmp	#txout

		wypin	pa,_txpin_	'output byte

		bith	_com,#31	'set flag to indicate tx output has occurred

		ret		wcz	'return with preserved flags
'
'
' Defined data
'
asm		long	0		'0 = spin, 1 = asm

_cog		byte	"Cog0  ",0,0	'strings
_ini		byte	"INIT ",0,0,0
_lod		byte	" load",0,0,0
_jmp		byte	" jump",0,0,0
_com		byte	", ",0,0	'bit 31 of _com is used as a flag
_equ		byte	" = ",0
_nil		byte	"nil",0
'
'
' Powers of ten accessed via rdlong
'
tens		long	            1
		long	           10
		long	          100
		long	        1_000
		long	       10_000
		long	      100_000
		long	    1_000_000
		long	   10_000_000
		long	  100_000_000
		long	1_000_000_000

debugger_end
'
'
'********************
'*  DEBUG Commands  *
'********************
'
'	00000000	end				end of DEBUG commands
'	00000001	asm				set asm mode
'	00000010	IF(cond)			abort if cond = 0
'	00000011	IFNOT(cond)			abort if cond <> 0
'	00000100	cogn				output "CogN  " with possible timestamp
'	00000101	chr				output chr
'	00000110	str				output string
'	00000111	DLY(ms)				delay for ms
'
'	______00	', ' + zstr + ' = ' + data	specifiers for ZSTR..SBIN_LONG_ARRAY
'	______01	       zstr + ' = ' + data
'	______10	               ', ' + data
'	______11	                      data
'
'	001000__	ZSTR(ptr)			z-string, in quotes for show
'	001100__	LSTR(ptr,len)			length-string, in quotes for show
'
'	010000__	UDEC(val)			unsigned decimal
'	010001__	UDEC_BYTE(val)
'	010010__	UDEC_WORD(val)
'	010011__	UDEC_LONG(val)
'	010100__	UDEC_REG_ARRAY(ptr,len)
'	010100__	UDEC_BYTE_ARRAY(ptr,len)
'	010110__	UDEC_WORD_ARRAY(ptr,len)
'	010111__	UDEC_LONG_ARRAY(ptr,len)
'
'	011000__	SDEC(val)			signed decimal
'	011001__	SDEC_BYTE(val)
'	011010__	SDEC_WORD(val)
'	011011__	SDEC_LONG(val)
'	011100__	SDEC_REG_ARRAY(ptr,len)
'	011101__	SDEC_BYTE_ARRAY(ptr,len)
'	011110__	SDEC_WORD_ARRAY(ptr,len)
'	011111__	SDEC_LONG_ARRAY(ptr,len)
'
'	100000__	UHEX(val)			unsigned hex
'	100001__	UHEX_BYTE(val)
'	100010__	UHEX_WORD(val)
'	100011__	UHEX_LONG(val)
'	100100__	UHEX_REG_ARRAY(ptr,len)
'	100101__	UHEX_BYTE_ARRAY(ptr,len)
'	100110__	UHEX_WORD_ARRAY(ptr,len)
'	100111__	UHEX_LONG_ARRAY(ptr,len)
'
'	101000__	SHEX(val)			signed hex
'	101001__	SHEX_BYTE(val)
'	101010__	SHEX_WORD(val)
'	101011__	SHEX_LONG(val)
'	101100__	SHEX_REG_ARRAY(ptr,len)
'	101101__	SHEX_BYTE_ARRAY(ptr,len)
'	101110__	SHEX_WORD_ARRAY(ptr,len)
'	101111__	SHEX_LONG_ARRAY(ptr,len)
'
'	110000__	UBIN(val)			unsigned binary
'	110001__	UBIN_BYTE(val)
'	110010__	UBIN_WORD(val)
'	110011__	UBIN_LONG(val)
'	110100__	UBIN_REG_ARRAY(ptr,len)
'	110101__	UBIN_BYTE_ARRAY(ptr,len)
'	110110__	UBIN_WORD_ARRAY(ptr,len)
'	110111__	UBIN_LONG_ARRAY(ptr,len)
'
'	111000__	SBIN(val)			signed binary
'	111001__	SBIN_BYTE(val)
'	111010__	SBIN_WORD(val)
'	111011__	SBIN_LONG(val)
'	111100__	SBIN_REG_ARRAY(ptr,len)
'	111101__	SBIN_BYTE_ARRAY(ptr,len)
'	111110__	SBIN_WORD_ARRAY(ptr,len)
'	111111__	SBIN_LONG_ARRAY(ptr,len)
'
'
' For PASM mode, each argument can be register or #immediate
'