'' simple SPI flash memory driver
' uses no cog, no streamer, no speed optimizations
' currently hardcoded to boot ROM pins

' tested to work with the following flash ICs:
' Winbond W25Q80DV
' Issi IS25LP080D
' Amic A25L080M
' ON LE25V40
' Adesto ST25SF041

' assumption: flash supports sysclk/4 (sysclk < 200MHz for Adesto, unlimited for Winbond)
' author: Nicolas Benezan (nicolas@benezan.de, forum: ManAtWork)

' bene 07-May-2020 Spi_WrLong() fixed (little endian)
' bene 09-Jul-2020 Spi_RdByte() fixed, waitx

CON     spi_cs = 61
        spi_ck = 60
        spi_di = 59 ' P2 -> flash
        spi_do = 58 ' flash -> P2

        Write_Enable = $06
        Erase_4k     = $20
        Erase_64k    = $D8
        Write_Page   = $02
        Read_Data    = $03
        Read_Status  = $05

PUB start() ' Dummy to avoid compiling as top
  repeat

PUB Erase(flashAdr, size) | cmd
' size can be 4kB or 64kB
  cmd:= Erase_4k
  if size > $1000
    cmd:= Erase_64k
  Spi_Init()
  Spi_Cmd8 (Write_Enable)
  Spi_Cmd32 (cmd, flashAdr)
  Spi_Wait()

PUB WritePage(hubAdr, flashAdr)
' writes a page of 256 bytes
  Spi_Init()
  Spi_Cmd8(Write_Enable)
  Spi_Cmd32(Write_Page, flashAdr)
  repeat 64
    Spi_WrLong (long[hubAdr])
    hubAdr+= 4
  Spi_Wait()

PUB Read (hubAdr, flashAdr, size)
' read any number of bytes
  Spi_Init ()
  Spi_Cmd32 (Read_Data, flashAdr)
  repeat size
    byte[hubAdr++]:= Spi_RdByte ()
  ORG
    drvh        #spi_cs
  END
  
PUB Verify(hubAdr, flashAdr, size) : ok
' compare HUBRAM to flash contents, true means match
  ok:= true
  Spi_Init()
  Spi_Cmd32(Read_Data, flashAdr)
  repeat size
    ok&= byte[hubAdr++] == Spi_RdByte()

  ORG
    drvh        #spi_cs
  END

  return ok

PRI Spi_Init()
  ORG
                drvh    #spi_cs                 'spi_cs high
                fltl    #spi_ck                 'reset smart pin spi_ck
                wrpin   #%01_00101_0,#spi_ck    'set spi_ck for transition output, starts out low
                wxpin   #2,#spi_ck              'set timebase to 2 clocks per transition
                drvl    #spi_ck                 'enable smart pin
                drvl    #spi_di
  END

PRI Spi_Cmd8(cmd)
' outputs 8 bits command, MSB first
  ORG
                drvh    #spi_cs
                shl     cmd,#24                 'shift command up
                drvl    #spi_cs
  END

  Spi_WrByte(cmd)

  ORG
                drvl    #spi_di
  END

PRI Spi_WrByte(cmd) : result
  ORG
                shl     cmd,#1 wc
                outc    #spi_di
                wypin   #16,#spi_ck             'start 16 clock transitions
                shl     cmd,#1 wc
                outc    #spi_di
                shl     cmd,#1 wc
                outc    #spi_di
                shl     cmd,#1 wc
                outc    #spi_di
                shl     cmd,#1 wc
                outc    #spi_di
                shl     cmd,#1 wc
                outc    #spi_di
                shl     cmd,#1 wc
                outc    #spi_di
                shl     cmd,#1 wc
                outc    #spi_di
  END
  return cmd

PRI Spi_Cmd32(cmd, adr)
' outputs 4 bytes: 8 bit command + 24 bits adr
  ORG
                drvh    #spi_cs
                shl     cmd,#24                 'shift command up
                or      cmd,adr                 'or in address
                drvl    #spi_cs
  END

  repeat 4
    cmd:= Spi_WrByte(cmd)

  ORG
                drvl    #spi_di
  END

PRI Spi_WrLong(l)
' outputs 32 bits while spi_cs stays low
  Spi_WrByte(l<<24)
  Spi_WrByte(l<<16)
  Spi_WrByte(l<<8)
  Spi_WrByte(l)

PRI Spi_RdByte (): b
' read 8 bits
  ORG
        wypin   #16,#spi_ck             'start 16 clock transitions
        mov     b,#0
        waitx   #4                      ' 3..6 works for me
        'nop                            'read later to compensate input/output delay
        'nop                            ' 2 or 3 nops works, 1+4 nops don't
        'nop
        testp   #spi_do wc
        rcl     b,#1
        testp   #spi_do wc
        rcl     b,#1
        testp   #spi_do wc
        rcl     b,#1
        testp   #spi_do wc
        rcl     b,#1
        testp   #spi_do wc
        rcl     b,#1
        testp   #spi_do wc
        rcl     b,#1
        testp   #spi_do wc
        rcl     b,#1
        testp   #spi_do wc
        rcl     b,#1
  END
  return b 


PRI Spi_Wait() | st

' waits until busy flag == 0, drives spi_cs high when done
  repeat
    Spi_Cmd8(Read_Status)
    st:= Spi_RdByte()
  until st & $01 == 0
  
  ORG
    drvh        #spi_cs
  END

{
+------------------------------------------------------------------------------------------------------------------------------+
¦                                                   TERMS OF USE: MIT License                                                  ¦                                                            
+------------------------------------------------------------------------------------------------------------------------------¦
¦Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation    ¦ 
¦files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,    ¦
¦modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software¦
¦is furnished to do so, subject to the following conditions:                                                                   ¦
¦                                                                                                                              ¦
¦The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.¦
¦                                                                                                                              ¦
¦THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE          ¦
¦WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR         ¦
¦COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,   ¦
¦ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                         ¦
+------------------------------------------------------------------------------------------------------------------------------+
}
